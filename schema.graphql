schema {
  query: Query
  mutation: Mutations
  subscription: Subscriptions
}

type Query {
  readLogs(
    order: [ClientLogSortInput!]
    where: ClientLogFilterInput
  ): [ClientLog!]!
  readCompanies: [Company!]!
  readProducts(
    where: ProductFilterInput
    order: [ProductSortInput!]
  ): [Product!]!
  readStoragedProducts(
    where: StoragedProductFilterInput
    order: [StoragedProductSortInput!]
  ): [StoragedProduct!]!
  readCashRegisters(
    where: CashRegisterFilterInput
    order: [CashRegisterSortInput!]
  ): [CashRegister!]!
  readStorages(
    where: StorageFilterInput
    order: [StorageSortInput!]
  ): [Storage!]!
  readNomenclatures(
    where: NomenclatureFilterInput
    order: [NomenclatureSortInput!]
  ): [Nomenclature!]!
  readSuppliers(
    where: SupplierFilterInput
    order: [SupplierSortInput!]
  ): [Supplier!]!
  readPaymentDates(
    where: PaymentDateFilterInput
    order: [PaymentDateSortInput!]
  ): [PaymentDate!]!
  readPaymentRules(where: PaymentRuleFilterInput): [PaymentRule!]!
  readPayments(
    where: PaymentFilterInput
    order: [PaymentSortInput!]
  ): [Payment!]!
  readCards(where: CardFilterInput, order: [CardSortInput!]): [Card!]!
  readServices(
    where: ServiceFilterInput
    order: [ServiceSortInput!]
  ): [Service!]!
  readUsers(where: UserFilterInput, order: [UserSortInput!]): [User!]!
}

type Mutations {
  createClientLog(
    payload: ClientLogDTOInput!
    order: [ClientLogSortInput!]
    where: ClientLogFilterInput
  ): ClientLog!
  updateClientLog(
    payload: ClientLogDTOInput!
    order: [ClientLogSortInput!]
    where: ClientLogFilterInput
  ): ClientLog!
  removeClientLog(
    payload: ClientLogDTOInput!
    where: ClientLogFilterInput
  ): ClientLog!
  createCompany(
    payload: CompanyDTOInput!
    order: [CompanySortInput!]
    where: CompanyFilterInput
  ): Company!
  updateCompany(
    payload: CompanyInput!
    order: [CompanySortInput!]
    where: CompanyFilterInput
  ): Company!
  createBankRequisites(
    payload: BankRequisitesDTOInput!
    order: [BankRequisitesSortInput!]
    where: BankRequisitesFilterInput
  ): BankRequisites!
  updateBankRequisites(
    payload: BankRequisitesInput!
    order: [BankRequisitesSortInput!]
    where: BankRequisitesFilterInput
  ): BankRequisites!
  createRequisites(
    payload: RequisitesInput!
    order: [RequisitesSortInput!]
    where: RequisitesFilterInput
  ): Requisites!
  updateRequisites(
    payload: RequisitesInput!
    order: [RequisitesSortInput!]
    where: RequisitesFilterInput
  ): Requisites!
  createContacts(
    payload: ContactsDTOInput!
    order: [ContactsSortInput!]
    where: ContactsFilterInput
  ): Contacts!
  updateContacts(
    payload: ContactsDTOInput!
    order: [ContactsSortInput!]
    where: ContactsFilterInput
  ): Contacts!
  createPhoneNumber(
    payload: PhoneNumberInput!
    order: [PhoneNumberSortInput!]
    where: PhoneNumberFilterInput
  ): PhoneNumber!
  updatePhoneNumber(
    payload: PhoneNumberDTOInput!
    order: [PhoneNumberSortInput!]
    where: PhoneNumberFilterInput
  ): PhoneNumber!
  createProduct(payload: ProductDTOInput!, where: ProductFilterInput): Product!
  updateProduct(payload: ProductDTOInput!, where: ProductFilterInput): Product!
  removeProduct(payload: ProductDTOInput!, where: ProductFilterInput): Product!
  createPaymentDate(
    payload: PaymentDateDTOInput!
    where: PaymentDateFilterInput
  ): PaymentDate!
  updatePaymentDate(
    payload: PaymentDateDTOInput!
    where: PaymentDateFilterInput
  ): PaymentDate!
  removePaymentDate(
    payload: PaymentDateDTOInput!
    where: PaymentDateFilterInput
  ): PaymentDate!
  createPaymentRule(
    payload: PaymentRuleDTOInput!
    where: PaymentRuleFilterInput
  ): PaymentRule!
  updatePaymentRule(
    payload: PaymentRuleDTOInput!
    where: PaymentRuleFilterInput
  ): PaymentRule!
  removePaymentRule(
    payload: PaymentRuleDTOInput!
    where: PaymentRuleFilterInput
  ): PaymentRule!
  createPayment(payload: PaymentDTOInput!, where: PaymentFilterInput): Payment!
  updatePayment(payload: PaymentDTOInput!, where: PaymentFilterInput): Payment!
  removePayment(payload: PaymentDTOInput!, where: PaymentFilterInput): Payment!
  createService(payload: ServiceDTOInput!, where: ServiceFilterInput): Service!
  updateService(payload: ServiceDTOInput!, where: ServiceFilterInput): Service!
  removeService(payload: ServiceDTOInput!, where: ServiceFilterInput): Service!
  createUser(payload: UserDTOInput!): User!
  updateUser(payload: UserInput!, where: UserFilterInput): User!
  removeUser(payload: UserInput!, where: UserFilterInput): User!
}

type Subscriptions {
  onCompanyCreated: Company!
  onCompanyChanged: Company!
  onCompanyRemoved: Company!
  onBankRequisitesCreated: BankRequisites!
  onBankRequisitesChanged: BankRequisites!
  onBankRequisitesRemoved: BankRequisites!
  onRequisitesCreated: Requisites!
  onRequisitesChanged: Requisites!
  onRequisitesRemoved: Requisites!
  onContactsCreated: Contacts!
  onContactsChanged: Contacts!
  onContactsRemoved: Contacts!
  onPhoneNumberCreated: PhoneNumber!
  onPhoneNumberChanged: PhoneNumber!
  onPhoneNumberRemoved: PhoneNumber!
  onProductCreated: Product!
  onProductChanged: Product!
  onProductRemoved: Product!
  onPaymentDateCreated: PaymentDate!
  onPaymentDateChanged: PaymentDate!
  onPaymentDateRemoved: PaymentDate!
  onPaymentRuleCreated: PaymentRule!
  onPaymentRuleChanged: PaymentRule!
  onPaymentRuleRemoved: PaymentRule!
  onPaymentCreated: Payment!
  onPaymentChanged: Payment!
  onPaymentRemoved: Payment!
  onServiceCreated: Service!
  onServiceChanged: Service!
  onServiceRemoved: Service!
  onUserCreated: User!
  onUserChanged: User!
  onUserRemoved: User!
}

input ClientLogSortInput {
  message: SortEnumType
  dateTime: SortEnumType
  type: SortEnumType
  id: SortEnumType
}

input ClientLogFilterInput {
  and: [ClientLogFilterInput!]
  or: [ClientLogFilterInput!]
  message: StringOperationFilterInput
  dateTime: DateTimeOperationFilterInput
  type: TypesOperationFilterInput
  senders: ListSenderTagsOperationFilterInput
  id: IntOperationFilterInput
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  or: [ProductFilterInput!]
  barCode: StringOperationFilterInput
  category: CategoryFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  priceBuy: FloatOperationFilterInput
  priceSell: FloatOperationFilterInput
  id: IntOperationFilterInput
}

input ProductSortInput {
  barCode: SortEnumType
  category: CategorySortInput
  name: SortEnumType
  description: SortEnumType
  priceBuy: SortEnumType
  priceSell: SortEnumType
  id: SortEnumType
}

input StoragedProductFilterInput {
  and: [StoragedProductFilterInput!]
  or: [StoragedProductFilterInput!]
  product: ProductFilterInput
  quantity: FloatOperationFilterInput
  id: IntOperationFilterInput
}

input StoragedProductSortInput {
  product: ProductSortInput
  quantity: SortEnumType
  id: SortEnumType
}

input CashRegisterFilterInput {
  and: [CashRegisterFilterInput!]
  or: [CashRegisterFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  company: CompanyFilterInput
  id: IntOperationFilterInput
}

input CashRegisterSortInput {
  name: SortEnumType
  description: SortEnumType
  company: CompanySortInput
  id: SortEnumType
}

input StorageFilterInput {
  and: [StorageFilterInput!]
  or: [StorageFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  products: ListFilterInputTypeOfStoragedProductFilterInput
  company: CompanyFilterInput
  id: IntOperationFilterInput
}

input StorageSortInput {
  name: SortEnumType
  description: SortEnumType
  company: CompanySortInput
  id: SortEnumType
}

input NomenclatureFilterInput {
  and: [NomenclatureFilterInput!]
  or: [NomenclatureFilterInput!]
  products: ListFilterInputTypeOfProductFilterInput
  company: CompanyFilterInput
  id: IntOperationFilterInput
}

input NomenclatureSortInput {
  company: CompanySortInput
  id: SortEnumType
}

input SupplierFilterInput {
  and: [SupplierFilterInput!]
  or: [SupplierFilterInput!]
  requisites: RequisitesFilterInput
  nomenclature: NomenclatureFilterInput
  company: CompanyFilterInput
  id: IntOperationFilterInput
}

input SupplierSortInput {
  requisites: RequisitesSortInput
  nomenclature: NomenclatureSortInput
  company: CompanySortInput
  id: SortEnumType
}

input PaymentDateFilterInput {
  and: [PaymentDateFilterInput!]
  or: [PaymentDateFilterInput!]
  date: DateOperationFilterInput
  price: FloatOperationFilterInput
  id: IntOperationFilterInput
}

input PaymentDateSortInput {
  date: SortEnumType
  price: SortEnumType
  id: SortEnumType
}

input PaymentRuleFilterInput {
  and: [PaymentRuleFilterInput!]
  or: [PaymentRuleFilterInput!]
  dates: ListFilterInputTypeOfPaymentDateFilterInput
  id: IntOperationFilterInput
}

input PaymentFilterInput {
  and: [PaymentFilterInput!]
  or: [PaymentFilterInput!]
  provider: UserFilterInput
  customer: UserFilterInput
  rule: PaymentRuleFilterInput
  cart: ListFilterInputTypeOfSalableObjectFilterInput
  isCompleted: BooleanOperationFilterInput
  company: CompanyFilterInput
  id: IntOperationFilterInput
}

input PaymentSortInput {
  provider: UserSortInput
  customer: UserSortInput
  rule: PaymentRuleSortInput
  isCompleted: SortEnumType
  company: CompanySortInput
  id: SortEnumType
}

input CardFilterInput {
  and: [CardFilterInput!]
  or: [CardFilterInput!]
  barcode: StringOperationFilterInput
  owner: IntOperationFilterInput
  connectedServices: ListFilterInputTypeOfServiceFilterInput
  id: IntOperationFilterInput
}

input CardSortInput {
  barcode: SortEnumType
  owner: SortEnumType
  id: SortEnumType
}

input ServiceFilterInput {
  and: [ServiceFilterInput!]
  or: [ServiceFilterInput!]
  category: CategoryFilterInput
  providers: ListFilterInputTypeOfUserFilterInput
  company: CompanyFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  priceBuy: FloatOperationFilterInput
  priceSell: FloatOperationFilterInput
  id: IntOperationFilterInput
}

input ServiceSortInput {
  category: CategorySortInput
  company: CompanySortInput
  name: SortEnumType
  description: SortEnumType
  priceBuy: SortEnumType
  priceSell: SortEnumType
  id: SortEnumType
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  name: StringOperationFilterInput
  surname: StringOperationFilterInput
  patronomic: StringOperationFilterInput
  email: StringOperationFilterInput
  phoneNumber: PhoneNumberFilterInput
  dateOfBirth: DateOperationFilterInput
  lastVisit: DateOperationFilterInput
  card: CardFilterInput
  deposit: FloatOperationFilterInput
  roles: ListFilterInputTypeOfRoleFilterInput
  id: IntOperationFilterInput
}

input UserSortInput {
  name: SortEnumType
  surname: SortEnumType
  patronomic: SortEnumType
  email: SortEnumType
  phoneNumber: PhoneNumberSortInput
  dateOfBirth: SortEnumType
  lastVisit: SortEnumType
  card: CardSortInput
  deposit: SortEnumType
  id: SortEnumType
}

input CompanySortInput {
  publicName: SortEnumType
  description: SortEnumType
  category: SortEnumType
  requisites: RequisitesSortInput
  contacts: ContactsSortInput
  id: SortEnumType
}

input CompanyFilterInput {
  and: [CompanyFilterInput!]
  or: [CompanyFilterInput!]
  publicName: StringOperationFilterInput
  description: StringOperationFilterInput
  category: CompanyCategoryOperationFilterInput
  requisites: RequisitesFilterInput
  contacts: ContactsFilterInput
  users: ListFilterInputTypeOfUserFilterInput
  cashRegisters: ListFilterInputTypeOfCashRegisterFilterInput
  storages: ListFilterInputTypeOfStorageFilterInput
  nomenclatures: ListFilterInputTypeOfNomenclatureFilterInput
  suppliers: ListFilterInputTypeOfSupplierFilterInput
  services: ListFilterInputTypeOfServiceFilterInput
  payment: ListFilterInputTypeOfPaymentFilterInput
  id: IntOperationFilterInput
}

input BankRequisitesSortInput {
  name: SortEnumType
  iik: SortEnumType
  bik: SortEnumType
  id: SortEnumType
}

input BankRequisitesFilterInput {
  and: [BankRequisitesFilterInput!]
  or: [BankRequisitesFilterInput!]
  name: StringOperationFilterInput
  iik: StringOperationFilterInput
  bik: StringOperationFilterInput
  id: IntOperationFilterInput
}

input RequisitesSortInput {
  organizationType: SortEnumType
  nameKZ: SortEnumType
  nameRU: SortEnumType
  nameEN: SortEnumType
  director: UserSortInput
  bin: SortEnumType
  kbe: SortEnumType
  legalAddress: SortEnumType
  physicalAddress: SortEnumType
  id: SortEnumType
}

input RequisitesFilterInput {
  and: [RequisitesFilterInput!]
  or: [RequisitesFilterInput!]
  organizationType: OrganizationTypesOperationFilterInput
  nameKZ: StringOperationFilterInput
  nameRU: StringOperationFilterInput
  nameEN: StringOperationFilterInput
  director: UserFilterInput
  bin: StringOperationFilterInput
  kbe: StringOperationFilterInput
  legalAddress: StringOperationFilterInput
  physicalAddress: StringOperationFilterInput
  bankRequisites: ListFilterInputTypeOfBankRequisitesFilterInput
  id: IntOperationFilterInput
}

input ContactsSortInput {
  instagram: SortEnumType
  webSite: SortEnumType
  linkedIn: SortEnumType
  id: SortEnumType
}

input ContactsFilterInput {
  and: [ContactsFilterInput!]
  or: [ContactsFilterInput!]
  phones: ListFilterInputTypeOfPhoneNumberFilterInput
  emails: ListStringOperationFilterInput
  instagram: StringOperationFilterInput
  webSite: StringOperationFilterInput
  linkedIn: StringOperationFilterInput
  id: IntOperationFilterInput
}

input PhoneNumberSortInput {
  number: SortEnumType
  whatsApp: SortEnumType
  id: SortEnumType
}

input PhoneNumberFilterInput {
  and: [PhoneNumberFilterInput!]
  or: [PhoneNumberFilterInput!]
  number: StringOperationFilterInput
  whatsApp: BooleanOperationFilterInput
  id: IntOperationFilterInput
}

enum SortEnumType {
  ASC
  DESC
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input TypesOperationFilterInput {
  eq: Types
  neq: Types
  in: [Types!]
  nin: [Types!]
}

input ListSenderTagsOperationFilterInput {
  all: SenderTagsOperationFilterInput
  none: SenderTagsOperationFilterInput
  some: SenderTagsOperationFilterInput
  any: Boolean
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input CategoryFilterInput {
  and: [CategoryFilterInput!]
  or: [CategoryFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  rootCategory: CategoryFilterInput
  childCategories: ListFilterInputTypeOfCategoryFilterInput
  id: IntOperationFilterInput
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input CategorySortInput {
  name: SortEnumType
  description: SortEnumType
  rootCategory: CategorySortInput
  id: SortEnumType
}

input ListFilterInputTypeOfStoragedProductFilterInput {
  all: StoragedProductFilterInput
  none: StoragedProductFilterInput
  some: StoragedProductFilterInput
  any: Boolean
}

input ListFilterInputTypeOfProductFilterInput {
  all: ProductFilterInput
  none: ProductFilterInput
  some: ProductFilterInput
  any: Boolean
}

input DateOperationFilterInput {
  eq: Date
  neq: Date
  in: [Date]
  nin: [Date]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input ListFilterInputTypeOfPaymentDateFilterInput {
  all: PaymentDateFilterInput
  none: PaymentDateFilterInput
  some: PaymentDateFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSalableObjectFilterInput {
  all: SalableObjectFilterInput
  none: SalableObjectFilterInput
  some: SalableObjectFilterInput
  any: Boolean
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input PaymentRuleSortInput {
  id: SortEnumType
}

input ListFilterInputTypeOfServiceFilterInput {
  all: ServiceFilterInput
  none: ServiceFilterInput
  some: ServiceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRoleFilterInput {
  all: RoleFilterInput
  none: RoleFilterInput
  some: RoleFilterInput
  any: Boolean
}

input CompanyCategoryOperationFilterInput {
  eq: CompanyCategory
  neq: CompanyCategory
  in: [CompanyCategory!]
  nin: [CompanyCategory!]
}

input ListFilterInputTypeOfCashRegisterFilterInput {
  all: CashRegisterFilterInput
  none: CashRegisterFilterInput
  some: CashRegisterFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStorageFilterInput {
  all: StorageFilterInput
  none: StorageFilterInput
  some: StorageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfNomenclatureFilterInput {
  all: NomenclatureFilterInput
  none: NomenclatureFilterInput
  some: NomenclatureFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSupplierFilterInput {
  all: SupplierFilterInput
  none: SupplierFilterInput
  some: SupplierFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPaymentFilterInput {
  all: PaymentFilterInput
  none: PaymentFilterInput
  some: PaymentFilterInput
  any: Boolean
}

input OrganizationTypesOperationFilterInput {
  eq: OrganizationTypes
  neq: OrganizationTypes
  in: [OrganizationTypes!]
  nin: [OrganizationTypes!]
}

input ListFilterInputTypeOfBankRequisitesFilterInput {
  all: BankRequisitesFilterInput
  none: BankRequisitesFilterInput
  some: BankRequisitesFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPhoneNumberFilterInput {
  all: PhoneNumberFilterInput
  none: PhoneNumberFilterInput
  some: PhoneNumberFilterInput
  any: Boolean
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

input SenderTagsOperationFilterInput {
  eq: SenderTags
  neq: SenderTags
  in: [SenderTags!]
  nin: [SenderTags!]
}

input ListFilterInputTypeOfCategoryFilterInput {
  all: CategoryFilterInput
  none: CategoryFilterInput
  some: CategoryFilterInput
  any: Boolean
}

"""
The `Date` scalar represents an ISO-8601 compliant date type.
"""
scalar Date

input SalableObjectFilterInput {
  and: [SalableObjectFilterInput!]
  or: [SalableObjectFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  priceBuy: FloatOperationFilterInput
  priceSell: FloatOperationFilterInput
  id: IntOperationFilterInput
}

input RoleFilterInput {
  and: [RoleFilterInput!]
  or: [RoleFilterInput!]
  userType: TypeOperationFilterInput
  companyId: IntOperationFilterInput
  id: IntOperationFilterInput
}

input TypeOperationFilterInput {
  eq: Type
  neq: Type
  in: [Type!]
  nin: [Type!]
}

type BankRequisites {
  name: String!
  iik: String!
  bik: String!
  id: Int!
}

input CompanyInput {
  publicName: String!
  description: String!
  category: CompanyCategory!
  requisites: RequisitesInput!
  contacts: ContactsInput!
  users: [UserInput!]!
  cashRegisters: [CashRegisterInput!]!
  storages: [StorageInput!]!
  nomenclatures: [NomenclatureInput!]!
  suppliers: [SupplierInput!]!
  services: [ServiceInput!]!
  payment: [PaymentInput!]!
  id: Int!
}

input CompanyDTOInput {
  publicName: String!
  description: String!
  category: CompanyCategory!
  requisites: RequisitesDTOInput!
  contacts: ContactsDTOInput!
  staff: [UserDTOInput!]!
  clients: [UserDTOInput!]!
  cashRegisters: [CashRegisterDTOInput!]!
  storages: [StorageDTOInput!]!
  nomenclatures: [NomenclatureDTOInput!]!
  suppliers: [SupplierDTOInput!]!
  services: [ServiceDTOInput!]!
  payment: [PaymentDTOInput!]!
}

input ClientLogDTOInput {
  message: String!
  dateTime: DateTime!
  type: Types!
  senders: [SenderTags!]!
}

type User {
  name: String!
  surname: String!
  patronomic: String
  email: String
  phoneNumber: PhoneNumber!
  dateOfBirth: Date
  lastVisit: Date
  card: Card
  deposit: Float!
  roles: [Role!]!
  id: Int!
}

type Service {
  category: Category!
  providers: [User!]!
  company: Company!
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
  id: Int!
}

type Card {
  barcode: String!
  owner: Int!
  connectedServices: [Service!]!
  id: Int!
}

type Payment {
  provider: User!
  customer: User!
  rule: PaymentRule!
  cart: [SalableObject!]!
  isCompleted: Boolean!
  company: Company!
  id: Int!
}

type PaymentRule {
  dates: [PaymentDate!]!
  id: Int!
}

type PaymentDate {
  date: Date!
  price: Float!
  id: Int!
}

type Supplier {
  requisites: Requisites!
  nomenclature: Nomenclature!
  company: Company!
  id: Int!
}

type Nomenclature {
  products: [Product!]!
  company: Company!
  id: Int!
}

type Storage {
  name: String!
  description: String!
  products: [StoragedProduct!]!
  company: Company!
  id: Int!
}

type CashRegister {
  name: String!
  description: String!
  company: Company!
  id: Int!
}

type StoragedProduct {
  product: Product!
  quantity: Float!
  id: Int!
}

type Product {
  barCode: String!
  category: Category!
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
  id: Int!
}

type Company {
  publicName: String!
  description: String!
  category: CompanyCategory!
  requisites: Requisites!
  contacts: Contacts!
  users: [User!]!
  cashRegisters: [CashRegister!]!
  storages: [Storage!]!
  nomenclatures: [Nomenclature!]!
  suppliers: [Supplier!]!
  services: [Service!]!
  payment: [Payment!]!
  id: Int!
}

type ClientLog {
  message: String!
  dateTime: DateTime!
  type: Types!
  senders: [SenderTags!]!
  id: Int!
}

input BankRequisitesDTOInput {
  name: String!
  iik: String!
  bik: String!
}

input BankRequisitesInput {
  name: String!
  iik: String!
  bik: String!
  id: Int!
}

type Requisites {
  organizationType: OrganizationTypes!
  nameKZ: String!
  nameRU: String!
  nameEN: String
  director: User
  bin: String
  kbe: String
  legalAddress: String
  physicalAddress: String
  bankRequisites: [BankRequisites!]!
  id: Int!
}

input RequisitesInput {
  organizationType: OrganizationTypes!
  nameKZ: String!
  nameRU: String!
  nameEN: String
  director: UserInput
  bin: String
  kbe: String
  legalAddress: String
  physicalAddress: String
  bankRequisites: [BankRequisitesInput!]!
  id: Int!
}

type Contacts {
  phones: [PhoneNumber!]!
  emails: [String!]!
  instagram: String!
  webSite: String!
  linkedIn: String!
  id: Int!
}

input ContactsDTOInput {
  phones: [PhoneNumberDTOInput!]!
  emails: [String!]!
  instagram: String!
  webSite: String!
  linkedIn: String!
}

type PhoneNumber {
  number: String!
  whatsApp: Boolean!
  id: Int!
}

input PhoneNumberInput {
  number: String!
  whatsApp: Boolean!
  id: Int!
}

input PhoneNumberDTOInput {
  number: String!
  whatsApp: Boolean!
}

input ProductDTOInput {
  barCode: String!
  category: CategoryDTOInput!
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
}

input PaymentDateDTOInput {
  date: Date!
  price: Float!
}

input PaymentRuleDTOInput {
  dates: [PaymentDateDTOInput!]!
}

input PaymentDTOInput {
  provider: UserDTOInput!
  customer: UserDTOInput!
  rule: PaymentRuleDTOInput!
  cart: [SalableObjectDTOInput!]!
  isCompleted: Boolean!
  company: CompanyDTOInput!
}

input ServiceDTOInput {
  category: CategoryDTOInput!
  providers: [UserDTOInput!]!
  company: CompanyDTOInput!
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
}

input UserDTOInput {
  name: String!
  surname: String!
  patronomic: String!
  email: String
  phoneNumber: PhoneNumberDTOInput!
  dateOfBirth: Date
  roles: [RoleDTOInput!]!
}

input UserInput {
  name: String!
  surname: String!
  patronomic: String
  email: String
  phoneNumber: PhoneNumberInput!
  dateOfBirth: Date
  lastVisit: Date
  card: CardInput
  deposit: Float!
  roles: [RoleInput!]!
  id: Int!
}

enum Types {
  SUCCSESSFULL
  WARNING
  ERROR
  LOG
  SYSTEM
}

enum CompanyCategory {
  DEVELOPER
  FITNESS_CENTRE
  SPORTS_NUTRITION_STORE
  SPORTS_NUTRITION_SUPPLIER
}

enum OrganizationTypes {
  IE
  LLP
  JSC
}

enum SenderTags {
  CLIENTS
  SELLS
  SERVICE
  ORGANIZATION
}

enum Type {
  OWNER
  ADMIN
  SPECIALIST
  CLIENT
}

input RoleInput {
  userType: Type!
  companyId: Int!
  id: Int!
}

input CardInput {
  barcode: String!
  owner: Int!
  connectedServices: [ServiceInput!]!
  id: Int!
}

input RoleDTOInput {
  userType: Type!
  companyId: Int!
}

input SalableObjectDTOInput {
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
}

input CategoryDTOInput {
  name: String!
  description: String!
  rootCategory: CategoryDTOInput
  childCategories: [CategoryDTOInput!]
}

type SalableObject {
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
  id: Int!
}

type Category {
  name: String!
  description: String!
  rootCategory: Category
  childCategories: [Category!]
  id: Int!
}

type Role {
  userType: Type!
  companyId: Int!
  id: Int!
}

input SupplierDTOInput {
  requisites: RequisitesDTOInput!
  nomenclature: NomenclatureDTOInput!
  company: CompanyDTOInput!
}

input NomenclatureDTOInput {
  products: [ProductDTOInput!]!
  company: CompanyDTOInput!
}

input StorageDTOInput {
  name: String!
  description: String!
  products: [StoragedProductDTOInput!]!
  company: CompanyDTOInput!
}

input CashRegisterDTOInput {
  name: String!
  description: String!
  company: CompanyDTOInput!
}

input RequisitesDTOInput {
  organizationType: OrganizationTypes!
  nameKZ: String!
  nameRU: String!
  nameEN: String
  director: UserDTOInput
  bin: String
  kbe: String
  legalAddress: String
  physicalAddress: String
  bankRequisites: [BankRequisitesDTOInput!]!
}

input PaymentInput {
  provider: UserInput!
  customer: UserInput!
  rule: PaymentRuleInput!
  cart: [SalableObjectInput!]!
  isCompleted: Boolean!
  company: CompanyInput!
  id: Int!
}

input ServiceInput {
  category: CategoryInput!
  providers: [UserInput!]!
  company: CompanyInput!
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
  id: Int!
}

input SupplierInput {
  requisites: RequisitesInput!
  nomenclature: NomenclatureInput!
  company: CompanyInput!
  id: Int!
}

input NomenclatureInput {
  products: [ProductInput!]!
  company: CompanyInput!
  id: Int!
}

input StorageInput {
  name: String!
  description: String!
  products: [StoragedProductInput!]!
  company: CompanyInput!
  id: Int!
}

input CashRegisterInput {
  name: String!
  description: String!
  company: CompanyInput!
  id: Int!
}

input ContactsInput {
  phones: [PhoneNumberInput!]!
  emails: [String!]!
  instagram: String!
  webSite: String!
  linkedIn: String!
  id: Int!
}

input StoragedProductInput {
  product: ProductInput!
  quantity: Float!
  id: Int!
}

input ProductInput {
  barCode: String!
  category: CategoryInput!
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
  id: Int!
}

input CategoryInput {
  name: String!
  description: String!
  rootCategory: CategoryInput
  childCategories: [CategoryInput!]
  id: Int!
}

input SalableObjectInput {
  name: String!
  description: String!
  priceBuy: Float!
  priceSell: Float!
  id: Int!
}

input PaymentRuleInput {
  dates: [PaymentDateInput!]!
  id: Int!
}

input StoragedProductDTOInput {
  product: ProductDTOInput!
  quantity: Float!
}

input PaymentDateInput {
  date: Date!
  price: Float!
  id: Int!
}
